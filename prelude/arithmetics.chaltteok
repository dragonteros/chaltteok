갑절 [명사] -> 두 곱절

값 [명사]
무엇의 값:
어찌한 값:
어찌한 것:
{
  needs("1 수");
  return ([num]) => [num];
}
무엇의 값:
어찌한 값:
어찌한 것:
{
  needs("1 정수");
  return ([num]) => [num];
}

곱 [명사]
여러 수의 곱:
여러 정수의 곱:
  앞의 것을 모두 곱한 것.  (TODO: 해당 수들)

곱절 [명사]
정수의 정수 곱절:
얼마의 몇 곱절:
  앞의 것과 뒤의 것의 곱.  (TODO: 동적 오버로딩 선택 관련해서 고민 좀 해보자)

곱하다 [동사] 곱하여/곱해, 곱하니
얼마에 얼마를 곱하다:
얼마와 얼마를 곱하다: { // 
  return ([x], [y]) => [{type: "수", 값: x.값 * y.값}];
}
어느 정수에 어느 정수를 곱하다:
어느 정수와 어느 정수를 곱하다: {
  return ([x], [y]) => [{type: "정수", 값: x.값 * y.값}];
}
여러 수를 모두 곱하다: {
  return (nums) => [nums.reduce((x, y) => ({type: "수", 값: x.값 * y.값}))];
}
여러 정수를 모두 곱하다: {
  return (nums) => [nums.reduce((x, y) => ({type: "정수", 값: x.값 * y.값}))];
}
어느 변수에 어느 정수를 곱해 놓다:
어느 변수에 어느 정수를 곱해 두다: {  // TODO: 어느 정수 변수에
  needs("1 정수 변수", "1 정수");
  return function (box, [num]) {
    box.data[0].값 *= num.값;
    return [];
  };
}
어느 변수에 얼마를 곱해 놓다:
어느 변수에 얼마를 곱해 두다: {
  needs("1 수 변수", "1 수");
  return function (box, [num]) {
    box.data[0].값 *= num.값;
    return [];
  };
}

나눔 [명사] (: 수의 일종.  ( 새 타입 생성 ))
무엇의 값:
어찌한 값:
어찌한 것: {
  needs("1 나눔");
  return ([division]) => [{type: "수", 값: division.값}];
}
몫 [명사]
무엇의 몫:
어찌한 몫: {
  needs("1 나눔");
  return ([division]) => [{type: "정수", 값: division.몫}];
}
나머지 [명사]
무엇의 나머지:
어찌한 나머지: {
  needs("1 나눔");
  return ([division]) => [{type: "정수", 값: division.나머지}];
}

나누다 [동사] 나누어/나눠, 나누니
얼마를 얼마로 나누다:
{
  return ([나뉘는수], [나누는수]) => [{type: "수", 값: 나뉘는수.값 / 나누는수.값}];
}
어느 정수를 어느 정수로 나누다:
{
  return ([나뉘는수], [나누는수]) => {
    const 값 = 나뉘는수.값 / 나누는수.값;
    const 나머지 = 나뉘는수.값 % 나누는수.값;
    const 몫 = (나뉘는수.값 - 나머지) / 나누는수.값;
    return [{type: "나눔", 값, 몫, 나머지}];
  };
}

나누어떨어지다 [동사] 나누어떨어져, 나누어떨어지니
어느 정수가 어느 정수로 나누어떨어지다:
  앞의 정수를 뒤의 정수로 나누어 그 나머지가 0이 되다. (TODO: "그" 생략)

더하다 [동사] 더하여/더해, 더하니
얼마에 얼마를 더하다:
얼마와 얼마를 더하다: {
  return ([x], [y]) => [{type: "수", 값: x.값 + y.값}];
}
어느 정수에 어느 정수를 더하다:
어느 정수와 어느 정수를 더하다: {
  return ([x], [y]) => [{type: "정수", 값: x.값 + y.값}];
}
여러 수를 모두 더하다: {
  return (nums) => [nums.reduce((x, y) => ({type: "수", 값: x.값 + y.값}))];
}
여러 정수를 모두 더하다: {
  return (nums) => [nums.reduce((x, y) => ({type: "정수", 값: x.값 + y.값}))];
}
어느 변수에 얼마를 더해 놓다:
어느 변수에 얼마를 더해 두다: {
  needs("1 수 변수", "1 수");
  return function (box, [num]) {
    box.data[0].값 += num.값;
    return [];
  };
}
어느 변수에 어느 정수를 더해 놓다:
어느 변수에 어느 정수를 더해 두다: {
  needs("1 정수 변수", "1 정수");
  return function (box, [num]) {
    box.data[0].값 += num.값;
    return [];
  };
}

반올림 [명사]
얼마의 반올림: {
  return ([x]) => [{type: "정수", 값: Math.round(x.값)}];
}

배 [명사] -> 곱절

버림 [명사]
얼마의 버림: {
  return ([x]) => [{type: "정수", 값: Math.floor(x.값)}];
}

-분 [접미사]
얼마분의 얼마:
  뒤의 수를 앞의 수로 나눈 값.

빼다 [동사] 빼어/빼, 빼니
얼마에서 얼마를 빼다: {
  return ([x], [y]) => [{type: "수", 값: x.값 - y.값}];
}
어느 정수에서 어느 정수를 빼다: {
  return ([x], [y]) => [{type: "정수", 값: x.값 - y.값}];
}
어느 변수에서 어느 수를 빼 놓다:
어느 변수에서 어느 수를 빼 두다: {
  needs("1 수 변수", "1 수");
  return function (box, [num]) {
    box.data[0].값 -= num.값;
    return [];
  };
}
어느 변수에서 어느 정수를 빼 놓다:
어느 변수에서 어느 정수를 빼 두다: {
  needs("1 정수 변수", "1 정수");
  return function (box, [num]) {
    box.data[0].값 -= num.값;
    return [];
  };
}

소수부 [명사]
얼마의 소수부:
  해당 수를 1로 나눈 나머지.

올림 [명사]
얼마의 올림: {
  return ([x]) => [{type: "정수", 값: Math.ceil(x.값)}];
}

절댓값 [명사]
얼마의 절댓값: {
  return ([x]) => [{type: "수", 값: Math.abs(x.값)}];
}
어느 정수의 절댓값: {
  return ([x]) => [{type: "정수", 값: Math.abs(x.값)}];
}

정수부 [명사]
얼마의 정수부:
  해당 수에서 해당 수의 소수부를 뺀 정수.

-제곱 [접미사]
어느 정수의 어느 정수제곱: {
  pos("명사");
  return function ([x], [y]) {
    if (y.값 < 0) {
      if (x.값 === 0) throw new Error("0의 음수 거듭제곱을 시도했습니다.");
      return [{type: "수", 값: Math.pow(x.값, y.값)}];
    }
    return [{type: "정수", 값: Math.pow(x.값, y.값)}];
  }
}
얼마의 몇제곱: {
  pos("명사");
  return function ([x], [y]) {
    if (x.값 === 0 && y.값 < 0) {
      throw new Error("0의 음수 거듭제곱을 시도했습니다.");
    }
    return [{type: "수", 값: Math.pow(x.값, y.값)}];
  }
}

제곱 [명사] -> 두제곱

제곱하다 [동사] 제곱하여/제곱해, 제곱하니
어느 정수를 제곱하다:
얼마를 제곱하다:
  앞의 것의 제곱을 구하다.

차 [명사]
두 수의 차: { // TODO: 찰떡으로 구현
  return ([x, y]) => [{type: "수", 값: Math.abs(x.값 - y.값)}];
}
두 정수의 차: {
  return ([x, y]) => [{type: "정수", 값: Math.abs(x.값 - y.값)}];
}

합 [명사]
여러 수의 합:
  앞의 것을 모두 더한 것.
