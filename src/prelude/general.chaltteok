(
  동일한 형식의 여러 패턴이 있으면 후에 타입을 보고 매칭.
)
(
  여기에 적을 수 없는 것:
  - 부사, 수사
  - 품사가 곳에 따라 바뀌는 경우 (아니하다, 않다)
  - 활용이 예외적인 경우 (아니다, 있다, 없다)
  - 조사 `이다`, 어미 `-(으)ㅁ`, `-기`
)
(
  TODO:
  - 선어말어미?

  무엇의 각 무엇 -> 여럿
  여럿이/을/에/... 각각
  여럿이/을/에/... 모두
  모든 무엇이/을/에/... = 각 무엇이/을/에... 모두
)
(
  형용사(있다, 없다 포함)는 항상 참거짓 하나이며 부작용을 포함하지 않는다.
  동사는 그런 제약이 없다.
)

값 [명사]
거 [명사] -> 거
것 [명사]
그거 [대명사] -> 그것
그것 [대명사]
다음 [명사]
뒤 [명사]
몇 [명사]  ( TODO )
무어 [명사] -> 무엇
무엇 [명사]
뭐 [명사] -> 무엇
변수 [명사]
수 [명사]
실수 [명사]
앞 [명사]
얼마 [명사] -> 어느 수
유형 [명사]
일종 [명사]
자연수 [명사]
정수 [명사]
참거짓 [명사]

각 [관형사]
그 [관형사]
모든 [관형사]
여러 [관형사]
어느 [관형사]
해당 [관형사]

각각 [부사]
공히 [부사]
모두 [부사]
못 [부사]
아니 [부사]
안 [부사] -> 아니

( TODO: 활용형 너무 똑같은데...
  그러다 [동사] 그래, 그러니 -> 그리하다
  그렇다 [형용사] 그래, 그러니 -> 그러하다
)
어떠하다 [형용사] 어떠하여/어떠해, 어떠하니
어떻다 [형용사] 어때, 어떠니/어떻니 -> 어떠하다
어쩌다 [동사] 어째, 어쩌니 -> 어찌하다
어찌하다 [동사] 어찌하여/어찌해, 어찌하니

과/와 [조사]
까지 [조사]
보다 [조사]
부터 [조사]
에 [조사]
에게 [조사]
에서 [조사]
은/는 [조사]
을/를 [조사]
의 [조사]
이/가 [조사]
이나/나 [조사]
이라고/라고 [조사]

-ㄴ [어미] 동사, 형용사, 이다 뒤에
-ㄴ다/는다 [어미] 있다, 없다, 동사 뒤에
-ㄴ지 [어미] 이다, 형용사 뒤에
-ㄹ [어미]
-ㅁ [어미]
-게 [어미]
-고 [어미]
-기 [어미]
-는 [어미] 있다, 없다, 동사 뒤에
-는지 [어미] 있다, 없다, 동사 뒤에
-다 [어미]
-자 [어미] 동사 뒤에
-어 [어미]
-어서 [어미]

어찌/어떠하고: { // 더 구체적인 타입을 요구하는 패턴으로 매칭.
  needs('1 참거짓');
  returns('1 참거짓', '부사');
  return f;
}
어찌하고: {
  needs('n T');
  register(null, 'n T');
  returns('', '부사');
  return function (action) {
    const result = f(action);
    env.setRegister(result);
    return [];
  };
}

어찌하여: 그리하고.  (= 해당 행동)
어찌하여서: 그리하고.

어찌한 뒤: 그리하고.
어찌한 뒤에: 그리하고.

어찌한 다음: 그리하고.
어찌한 다음에: 그리하고.


(
  명사 -> 다른 품사
)
대하다 [동사] 대하여/대해, 대하니
무엇에 대하다: {
  needs('n T');
  returns('n T', '동사');
  return f;
}
무엇이다: {
  needs('n T');
  returns('n T', '형용사');
  return f;
}

(
  용언 -> 다른 품사
)
어찌/어떠한:
어찌하는: {
  needs('n T');
  returns('n T', '관형사');
  return f;
}
어떠하게 되다: { // 어떠하게 하다??
  needs('1 참거짓');
  returns('1 참거짓', '동사');
  return f;
}
어떠한지:
어찌하는지: {
  needs('1 참거짓');
  returns('1 참거짓', '명사');
  return f;
}
