갑절 [명사] -> 두 곱절

곱 [명사]
여러 수의 곱: {
  returns('1 수');
  return f((nums) => [nums.reduce((x, y) => x * y)]);
}

곱절 [명사]
얼마의 몇 곱절: 앞의 수와 뒤의 수의 곱.

곱하다 [동사] 곱하여/곱해, 곱하니
얼마와 얼마를 곱하다: {
  returns('1 수');
  return f(([x], [y]) => [x * y]);
}
여러 수를 모두 곱하다: {
  returns('1 수');
  return f((numbers) => [numbers.reduce((x, y) => x * y)]);
}
어느 변수에 얼마를 곱하다: {
  needs('1 수 변수', '1 수');
  returns('1 수 변수');
  return f(function ([name], [num]) {
    const value = env.get(name)[0] * num;
    env.set(name, [value]);
    return [name];
  })
}

나눔 [명사]: 수의 일종.
어느 나눔의 값: {
  returns('1 수');
  return f(([division]) => [division.값]);
}
몫 [명사]
어느 나눔의 몫: {
  returns('1 수');
  return f(([division]) => [division.몫]);
}
나머지 [명사]
어느 나눔의 나머지: {
  returns('1 수');
  return f(([division]) => [division.나머지]);
}

나누다 [동사] 나누어/나눠, 나누니
얼마를 얼마로 나누다: {
  returns('1 나눔');
  return f(([나뉘는수], [나누는수]) => {
    const 나머지 = 나뉘는수 % 나누는수;
    const 값 = 나뉘는수 / 나누는수;
    const 몫 = (나뉘는수 - 나머지) / 나머지;
    return [{ 값, 몫, 나머지 }];
  });
}

나누어떨어지다 [동사] 나누어떨어져, 나누어떨어지니
얼마가 얼마로 나누어떨어지다: { 
  returns('1 참거짓');
  return f(([x], [y]) => [x % y === 0]);
}

더하다 [동사] 더하여/더해, 더하니
얼마와 얼마를 더하다: {
  returns('1 수');
  return f(([x], [y]) => [x + y]);
}
여러 수를 모두 더하다: {
  returns('1 수');
  return f((numbers) => [numbers.reduce((x, y) => x + y)]);
}
어느 변수에 얼마를 더하다: {
  needs('1 수 변수', '1 수');
  returns('1 수 변수');
  return f(function ([name], [num]) {
    const value = env.get(name)[0] + num;
    env.set(name, [value]);
    return [name];
  })
}

반올림 [명사]
얼마의 반올림:
  해당 수와 그 버림의 차가 해당 수와 그 올림의 차보다 작으면 해당 수의 버림
  아니면 해당 수의 올림.

배 [명사] -> 곱절

버림 [명사]
얼마의 버림:
  해당 수를 1로 나눈 몫을 '정수부'라고 할 때,
  해당 수가 정수가 아닌 음수이면 '정수부'보다 하나 작은 수, 아니면 '정수부'.

-분 [접미사]
얼마분의 얼마: {
  returns('1 수');
  return f(([x], [y]) => [y / x]);
}

빼다 [동사] 빼어/빼, 빼니
얼마에서 얼마를 빼다: {
  needs('1 수', '1 수');
  returns('1 수');
  return f(([x], [y]) => [x - y]);
}
어느 변수에서 얼마를 빼다: {
  needs('1 수 변수', '1 수');
  returns('1 수 변수');
  return f(function ([name], [num]) {
    const value = env.get(name)[0] - num;
    env.set(name, [value]);
    return [name];
  })
}

올림 [명사]
얼마의 올림:
  해당 수를 1로 나눈 몫을 '정수부'라고 할 때,
  해당 수가 정수가 아닌 양수이면 '정수부'보다 하나 큰 수, 아니면 '정수부'.

-제곱 [접미사]
얼마의 몇제곱: {
  returns('1 수', '명사');
  return f(([x], [y]) => [Math.pow(x, y)]);
}

제곱 [명사] -> 두제곱

차 [명사]
두 수의 차: { 
  returns('1 수');
  return f(([x, y]) => [Math.abs(x - y)]);
}

합 [명사]
여러 수의 합: {
  returns('1 수');
  return f((numbers) => [numbers.reduce((x, y) => x + y)]);
}
