export const PRELUDE: string = "갑절 [명사] -> 두 곱절\n\n곱 [명사]\n여러 수의 곱: {\nreturns('1 수');\nreturn f((nums) => [nums.reduce((x, y) => x * y)]);\n}\n\n곱절 [명사]\n얼마의 몇 곱절: 앞의 수와 뒤의 수의 곱.\n\n곱하다 [동사] 곱하여/곱해, 곱하니\n얼마와 얼마를 곱하다: {\nreturns('1 수');\nreturn f(([x], [y]) => [x * y]);\n}\n여러 수를 모두 곱하다: {\nreturns('1 수');\nreturn f((numbers) => [numbers.reduce((x, y) => x * y)]);\n}\n어느 변수에 얼마를 곱하다: {\nneeds('1 수 변수', '1 수');\nreturns('1 수 변수');\nreturn f(function ([name], [num]) {\nconst value = env.get(name)[0] * num;\nenv.set(name, [value]);\nreturn [name];\n})\n}\n\n나눔 [명사]: 수의 일종.\n어느 나눔의 값: {\nreturns('1 수');\nreturn f(([division]) => [division.값]);\n}\n몫 [명사]\n어느 나눔의 몫: {\nreturns('1 수');\nreturn f(([division]) => [division.몫]);\n}\n나머지 [명사]\n어느 나눔의 나머지: {\nreturns('1 수');\nreturn f(([division]) => [division.나머지]);\n}\n\n나누다 [동사] 나누어/나눠, 나누니\n얼마를 얼마로 나누다: {\nreturns('1 나눔');\nreturn f(([나뉘는수], [나누는수]) => {\nconst 나머지 = 나뉘는수 % 나누는수;\nconst 값 = 나뉘는수 / 나누는수;\nconst 몫 = (나뉘는수 - 나머지) / 나머지;\nreturn [{ 값, 몫, 나머지 }];\n});\n}\n\n나누어떨어지다 [동사] 나누어떨어져, 나누어떨어지니\n얼마가 얼마로 나누어떨어지다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x % y === 0]);\n}\n\n더하다 [동사] 더하여/더해, 더하니\n얼마와 얼마를 더하다: {\nreturns('1 수');\nreturn f(([x], [y]) => [x + y]);\n}\n여러 수를 모두 더하다: {\nreturns('1 수');\nreturn f((numbers) => [numbers.reduce((x, y) => x + y)]);\n}\n어느 변수에 얼마를 더하다: {\nneeds('1 수 변수', '1 수');\nreturns('1 수 변수');\nreturn f(function ([name], [num]) {\nconst value = env.get(name)[0] + num;\nenv.set(name, [value]);\nreturn [name];\n})\n}\n\n반올림 [명사]\n얼마의 반올림:\n해당 수와 그 버림의 차가 해당 수와 그 올림의 차보다 작으면 해당 수의 버림\n아니면 해당 수의 올림.\n\n배 [명사] -> 곱절\n\n버림 [명사]\n얼마의 버림:\n해당 수를 1로 나눈 몫을 '정수부'라고 할 때,\n해당 수가 정수가 아닌 음수이면 '정수부'보다 하나 작은 수, 아니면 '정수부'.\n\n-분 [접미사]\n얼마분의 얼마: {\nreturns('1 수');\nreturn f(([x], [y]) => [y / x]);\n}\n\n빼다 [동사] 빼어/빼, 빼니\n얼마에서 얼마를 빼다: {\nneeds('1 수', '1 수');\nreturns('1 수');\nreturn f(([x], [y]) => [x - y]);\n}\n어느 변수에서 얼마를 빼다: {\nneeds('1 수 변수', '1 수');\nreturns('1 수 변수');\nreturn f(function ([name], [num]) {\nconst value = env.get(name)[0] - num;\nenv.set(name, [value]);\nreturn [name];\n})\n}\n\n올림 [명사]\n얼마의 올림:\n해당 수를 1로 나눈 몫을 '정수부'라고 할 때,\n해당 수가 정수가 아닌 양수이면 '정수부'보다 하나 큰 수, 아니면 '정수부'.\n\n-제곱 [접미사]\n얼마의 몇제곱: {\nreturns('1 수', '명사');\nreturn f(([x], [y]) => [Math.pow(x, y)]);\n}\n\n제곱 [명사] -> 두제곱\n\n차 [명사]\n두 수의 차: {\nreturns('1 수');\nreturn f(([x, y]) => [Math.abs(x - y)]);\n}\n\n합 [명사]\n여러 수의 합: {\nreturns('1 수');\nreturn f((numbers) => [numbers.reduce((x, y) => x + y)]);\n}\n\n거짓 [명사]: {\nreturns('1 참거짓');\nreturn () => [false];\n}\n참 [명사]: {\nreturns('1 참거짓');\nreturn () => [true];\n}\n\n같다 [형용사] 같아, 같으니\n다르다 [형용사] 달라, 다르니 -> 같지 아니하다\n\n작다 [형용사] 작아, 작으니\n얼마가 얼마보다 작다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x < y]);\n}\n얼마가 얼마보다 작거나 같다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x <= y]);\n}\n\n크다 [형용사] 커, 크니\n얼마가 얼마보다 크다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x > y]);\n}\n얼마가 얼마보다 크거나 같다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x >= y]);\n}\n\n이상 [명사]\n얼마가 얼마의 이상이다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x >= y]);\n}\n\n이하 [명사]\n얼마가 얼마의 이하이다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x <= y]);\n}\n\n초과 [명사]\n초과하다 [동사] 초과하여/초과해, 초과하니\n넘다 [동사] 넘어, 넘으니\n얼마가 얼마의 초과이다:\n얼마가 얼마를 초과하다:\n얼마가 얼마를 넘다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x > y]);\n}\n\n미만 [명사]\n얼마가 얼마의 미만이다: {\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x < y]);\n}\n\n얼마가 얼마의 이상 얼마의 미만이다: {\nreturns('1 참거짓');\nreturn f(([x], [lower], [upper]) => [lower <= x && x < upper]);\n}\n얼마가 얼마의 이상 얼마의 이하이다: {\nreturns('1 참거짓');\nreturn f(([x], [lower], [upper]) => [lower <= x && x <= upper]);\n}\n얼마가 얼마의 초과 얼마의 미만이다: {\nreturns('1 참거짓');\nreturn f(([x], [lower], [upper]) => [lower < x && x < upper]);\n}\n얼마가 얼마의 초과 얼마의 이하이다: {\nreturns('1 참거짓');\nreturn f(([x], [lower], [upper]) => [lower < x && x <= upper]);\n}\n\n(\n일반\n)\n\n( 무엇이 무엇이 아니다: 앞의 것이 뒤의 것이지 아니하다. // TODO )\n\n-지 [어미]\n어찌/어떠하지 않다:\n어찌/어떠하지 아니하다: {\nneeds('1 참거짓');\nreturns('1 참거짓');\nreturn f(([x]) => [!x]);\n}\n\n-거나 [어미]\n어찌/어떠하거나 어찌/어떠하다: {\nneeds('1 참거짓', '1 참거짓');\nreturns('1 참거짓');\nreturn f(([x], [y]) => [x || y]);\n}\n\n되다 [동사] 되어/돼, 되니\n두다 [동사] 두어/둬, 두니\n삼다 [동사] 삼아, 삼으니\n하다 [동사] 하여/해, 하니\n\n무엇을 어느 변수로 두다:\n무엇을 어느 변수로 삼다:\n무엇이 어느 변수가 되다:\n무엇이 어느 변수로 되다:\n무엇을 어느 변수로 하다:\n무엇을 어느 변수라고 하다:\n{\nneeds('1 T', '1 T 변수');\nreturns('1 T 변수');\nreturn f(function ([value], [name]) {\nenv.set(name, [value]);\nreturn [name];\n})\n}\n\n-으면 [어미]\n어찌/어떠하면 무엇 아니면 무엇:\n어찌/어떠하면 어찌/어떠하고 아니면 어찌/어떠하다:\n{\nneeds('1 참거짓', 'n T', 'n T');\nreturns('n T');\nreturn (condition, truthy, falsy) => f(condition)[0]? f(truthy): f(falsy);\n}\n그대로 [부사]\n무엇을 그대로 두다: {\nneeds('n T');\nreturns('n T');\nreturn f;\n}\n\n때 [명사]\n거듭하다 [동사] 거듭하여/거듭해, 거듭하니\n반복하다 [동사] 반복하여/반복해, 반복하니 -> 거듭하다\n어찌/어떠할 때까지 어찌하다:\n어찌/어떠할 때까지 무엇을 거듭하다:\n{\nneeds('1 참거짓', 'n T');\nreturns('');\nreturn function (condition, action) {\nwhile (!f(condition)[0]) f(action);\nreturn [];\n};\n}\n\n(\n동일한 형식의 여러 패턴이 있으면 후에 타입을 보고 매칭.\n)\n(\n여기에 적을 수 없는 것:\n- 부사, 수사\n- 품사가 곳에 따라 바뀌는 경우 (아니하다, 않다)\n- 활용이 예외적인 경우 (아니다, 있다, 없다)\n- 조사 `이다`, 어미 `-(으)ㅁ`, `-기`\n)\n(\nTODO:\n- 선어말어미?\n\n무엇의 각 무엇 -> 여럿\n여럿이/을/에/... 각각\n여럿이/을/에/... 모두\n모든 무엇이/을/에/... = 각 무엇이/을/에... 모두\n)\n(\n형용사(있다, 없다 포함)는 항상 참거짓 하나이며 부작용을 포함하지 않는다.\n동사는 그런 제약이 없다.\n)\n\n값 [명사]\n거 [명사] -> 거\n것 [명사]\n그거 [대명사] -> 그것\n그것 [대명사]\n다음 [명사]\n뒤 [명사]\n몇 [명사] ( TODO )\n무어 [명사] -> 무엇\n무엇 [명사]\n뭐 [명사] -> 무엇\n변수 [명사]\n수 [명사]\n실수 [명사]\n앞 [명사]\n얼마 [명사] -> 어느 수\n유형 [명사]\n일종 [명사]\n자연수 [명사]\n정수 [명사]\n참거짓 [명사]\n\n각 [관형사]\n그 [관형사]\n모든 [관형사]\n여러 [관형사]\n어느 [관형사]\n해당 [관형사]\n\n각각 [부사]\n공히 [부사]\n모두 [부사]\n못 [부사]\n아니 [부사]\n안 [부사] -> 아니\n\n( TODO: 활용형 너무 똑같은데...\n그러다 [동사] 그래, 그러니 -> 그리하다\n그렇다 [형용사] 그래, 그러니 -> 그러하다\n)\n어떠하다 [형용사] 어떠하여/어떠해, 어떠하니\n어떻다 [형용사] 어때, 어떠니/어떻니 -> 어떠하다\n어쩌다 [동사] 어째, 어쩌니 -> 어찌하다\n어찌하다 [동사] 어찌하여/어찌해, 어찌하니\n\n과/와 [조사]\n까지 [조사]\n보다 [조사]\n부터 [조사]\n에 [조사]\n에게 [조사]\n에서 [조사]\n은/는 [조사]\n을/를 [조사]\n의 [조사]\n이/가 [조사]\n이나/나 [조사]\n이라고/라고 [조사]\n\n-ㄴ [어미] 동사, 형용사, 이다 뒤에\n-ㄴ다/는다 [어미] 있다, 없다, 동사 뒤에\n-ㄴ지 [어미] 이다, 형용사 뒤에\n-ㄹ [어미]\n-ㅁ [어미]\n-게 [어미]\n-고 [어미]\n-기 [어미]\n-는 [어미] 있다, 없다, 동사 뒤에\n-는지 [어미] 있다, 없다, 동사 뒤에\n-다 [어미]\n-자 [어미] 동사 뒤에\n-어 [어미]\n-어서 [어미]\n\n어찌/어떠하고: { // 더 구체적인 타입을 요구하는 패턴으로 매칭.\nneeds('1 참거짓');\nreturns('1 참거짓', '부사');\nreturn f;\n}\n어찌하고: {\nneeds('n T');\nregister(null, 'n T');\nreturns('', '부사');\nreturn function (action) {\nconst result = f(action);\nenv.setRegister(result);\nreturn [];\n};\n}\n\n어찌하여: 그리하고. (= 해당 행동)\n어찌하여서: 그리하고.\n\n어찌한 뒤: 그리하고.\n어찌한 뒤에: 그리하고.\n\n어찌한 다음: 그리하고.\n어찌한 다음에: 그리하고.\n\n(\n명사 -> 다른 품사\n)\n대하다 [동사] 대하여/대해, 대하니\n무엇에 대하다: {\nneeds('n T');\nreturns('n T', '동사');\nreturn f;\n}\n무엇이다: {\nneeds('n T');\nreturns('n T', '형용사');\nreturn f;\n}\n\n(\n용언 -> 다른 품사\n)\n어찌/어떠한:\n어찌하는: {\nneeds('n T');\nreturns('n T', '관형사');\nreturn f;\n}\n어떠하게 되다: { // 어떠하게 하다??\nneeds('1 참거짓');\nreturns('1 참거짓', '동사');\nreturn f;\n}\n어떠한지:\n어찌하는지: {\nneeds('1 참거짓');\nreturns('1 참거짓', '명사');\nreturn f;\n}\n\n시작 [명사]\n끝 [명사]\n길이 [명사]\n범위 [명사]: 시작이 되는 수와 끝이 되는 수가 있는 유형.\n어느 범위의 길이: 해당 범위에 대해 그 시작과 끝의 차.\n\n얼마부터 얼마까지:\n앞의 수를 시작으로 하고 뒤의 수를 끝으로 하는 범위.\n\n-들 [접미사]\n어느 범위의 정수들: ( // returns('{n 정수}'); )\n해당 범위의 시작의 올림을 '첫수'라고 할 때,\n'첫수'가 해당 범위의 끝보다 크면 빈 수열의 수들,\n아니면 '첫수'와 그것보다 하나 많은 수부터 해당 범위의 끝까지의 정수들.\n";