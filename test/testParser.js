import assert from "assert";
import { ChaltteokSyntaxError } from "../src/base/errors";
import { restoreTokenFromKey } from "../src/finegrained/tokens";
import { parse } from "../src/parser/parser";
import { loadPreludeModule } from "../src/runner/prelude";

let ctx = null;

function intoTokens(repr) {
  const file = { path: "<test>", content: repr };

  const tokens = [];
  const detector = /\S+(?:\s+|$)/y;
  while (true) {
    const match = detector.exec(repr);
    if (match == null) break;
    const { index: start, 0: token } = match;

    const value = restoreTokenFromKey(token.trim());
    const metadata = { file, spans: [{ start, end: detector.lastIndex }] };
    tokens.push({ metadata, value });
  }
  return tokens;
}

function assertForest(original, expected) {
  if (ctx == null) ctx = loadPreludeModule().context;
  let tokens = intoTokens(original);
  tokens = ctx.substituter.run(tokens);
  const forest = parse(tokens, ctx.patterns);
  const formatted = forest.map((x) => x.debug()).join("");
  assert.deepStrictEqual(formatted.slice(0, -1), expected.slice(1));
}

describe("구문 분석", function () {
  it("기본", function () {
    assertForest(
      "4[한자어수사] 를[조사] 2[한자어수사] 로[조사] 나누다[동사] -다[어미] .",
      `
{}[동사] -다[어미]
  {}[명사] 를[조사] {}[명사] 로[조사] 나누다[동사]
    4[한자어수사]
    2[한자어수사]`
    );
    assertForest(
      "2[한자어수사] 로[조사] 4[한자어수사] 를[조사] 나누다[동사] -다[어미] .",
      `
{}[동사] -다[어미]
  {}[명사] 로[조사] {}[명사] 를[조사] 나누다[동사]
    2[한자어수사]
    4[한자어수사]`
    );
  });

  it("분수", function () {
    assertForest(
      "2[한자어수사] 분[접미사] 의[조사] 1[한자어수사] .",
      `
{}[명사] 분[접미사] 의[조사] {}[명사]
  2[한자어수사]
  1[한자어수사]`
    );
    assertForest(
      "2[한자어수사] 분[접미사] 의[조사] 3[한자어수사] 분[접미사] 의[조사] 1[한자어수사] .",
      `
{}[명사] 분[접미사] 의[조사] {}[명사]
  {}[명사] 분[접미사] 의[조사] {}[명사]
    2[한자어수사]
    3[한자어수사]
  1[한자어수사]`
    );
    assertForest(
      "2[한자어수사] 분[접미사] 의[조사] , 3[한자어수사] 분[접미사] 의[조사] 1[한자어수사] .",
      `
{}[명사] 분[접미사] 의[조사] {}[명사]
  2[한자어수사]
  {}[명사] 분[접미사] 의[조사] {}[명사]
    3[한자어수사]
    1[한자어수사]`
    );
  });
  it("거듭제곱", function () {
    assertForest(
      "3[한자어수사] 의[조사] 제곱[명사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  3[한자어수사]
  2[한자어수사]`
    );
    assertForest(
      "-2[한자어수사] 의[조사] 제곱[명사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  -2[한자어수사]
  2[한자어수사]`
    );
    assertForest(
      "0[한자어수사] 의[조사] 제곱[명사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  0[한자어수사]
  2[한자어수사]`
    );
    assertForest(
      "1[한자어수사] 의[조사] 0[한자어수사] 제곱[접미사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  1[한자어수사]
  0[한자어수사]`
    );
    assertForest(
      "2[한자어수사] 의[조사] 2[한자어수사] 제곱[접미사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  2[한자어수사]
  2[한자어수사]`
    );
    assertForest(
      "-2[한자어수사] 의[조사] 3[한자어수사] 제곱[접미사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  -2[한자어수사]
  3[한자어수사]`
    );
    assertForest(
      "4[한자어수사] 의[조사] 0.5[한자어수사] 제곱[접미사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  4[한자어수사]
  0.5[한자어수사]`
    );
    assertForest(
      "9[한자어수사] 의[조사] 0.5[한자어수사] 제곱[접미사] 의[조사] 3[한자어수사] 제곱[접미사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  {}[명사] 의[조사] {}[명사] 제곱[접미사]
    9[한자어수사]
    0.5[한자어수사]
  3[한자어수사]`
    );
    assertForest(
      "-2[한자어수사] 의[조사] 9[한자어수사] 의[조사] 0.5[한자어수사] 제곱[접미사] 제곱[접미사] .",
      `
{}[명사] 의[조사] {}[명사] 제곱[접미사]
  -2[한자어수사]
  {}[명사] 의[조사] {}[명사] 제곱[접미사]
    9[한자어수사]
    0.5[한자어수사]`
    );
  });

  it("나열", function () {
    assertForest(
      "2[한자어수사] 과[조사] 3[한자어수사] 를[조사] 곱하다[동사] -다[어미] .",
      `
{}[동사] -다[어미]
  {}[명사] 과[조사] {}[명사] 를[조사] 곱하다[동사]
    2[한자어수사]
    3[한자어수사]`
    );
    assertForest(
      "2[한자어수사] 과[조사] 3[한자어수사] 의[조사] 곱[명사] .",
      `
{}[명사] 의[조사] 곱[명사]
  ~과~
    2[한자어수사]
    3[한자어수사]`
    );
    assertForest(
      "2[한자어수사] 과[조사] 3[한자어수사] 의[조사] 곱[명사] 과[조사] 4[한자어수사] 의[조사] 차[명사] .",
      `
{}[명사] 의[조사] 차[명사]
  ~과~
    {}[명사] 의[조사] 곱[명사]
      ~과~
        2[한자어수사]
        3[한자어수사]
    4[한자어수사]`
    );
    assertForest(
      "4[한자어수사] 과[조사] 3[한자어수사] 의[조사] 곱[명사] 를[조사] 6[한자어수사] 로[조사] 나누다[동사] -다[어미] .",
      `
{}[동사] -다[어미]
  {}[명사] 를[조사] {}[명사] 로[조사] 나누다[동사]
    {}[명사] 의[조사] 곱[명사]
      ~과~
        4[한자어수사]
        3[한자어수사]
    6[한자어수사]`
    );
    assertForest(
      "4[한자어수사] 과[조사] 3[한자어수사] 의[조사] 곱[명사] 를[조사] 2[한자어수사] 과[조사] 4[한자어수사] 의[조사] 합[명사] 로[조사] 나누다[동사] -다[어미] .",
      `
{}[동사] -다[어미]
  {}[명사] 를[조사] {}[명사] 로[조사] 나누다[동사]
    {}[명사] 의[조사] 곱[명사]
      ~과~
        4[한자어수사]
        3[한자어수사]
    {}[명사] 의[조사] 합[명사]
      ~과~
        2[한자어수사]
        4[한자어수사]`
    );
  });

  it("순접", function () {
    assertForest(
      "1[한자어수사] 를[조사] 2[한자어수사] 과[조사] 더하다[동사] -(아/어)[어미] 3[한자어수사] 과[조사] 곱하다[동사] -다[어미] .",
      `
{}[동사] -다[어미]
  {}[동사] -(아/어)[어미] {}x[동사]
    {}[명사] 를[조사] {}[명사] 과[조사] 더하다[동사]
      1[한자어수사]
      2[한자어수사]
    {}[명사] 과[조사] 곱하다[동사]
      3[한자어수사]`
    );
    assertForest(
      "1[한자어수사] 를[조사] 2[한자어수사] 과[조사] 더하다[동사] -(아/어)[어미] 3[한자어수사] 과[조사] 곱하다[동사] -(으)ㄴ[어미] 값[명사] .",
      `
{}[동사] -(으)ㄴ[어미] 값[명사]
  {}[동사] -(아/어)[어미] {}x[동사]
    {}[명사] 를[조사] {}[명사] 과[조사] 더하다[동사]
      1[한자어수사]
      2[한자어수사]
    {}[명사] 과[조사] 곱하다[동사]
      3[한자어수사]`
    );
  });

  it("쉼표", function () {
    // TODO: 마지막 조사와 접사와 어미를 제외하고?
    assertForest(
      "0[한자어수사] 과[조사] 1[한자어수사] 과[조사] 2[한자어수사] 의[조사] 곱[명사] 과[조사] , 3[한자어수사] 과[조사] 4[한자어수사] 과[조사] 5[한자어수사] 의[조사] 곱[명사] 의[조사] , 합[명사] .",
      `
{}[명사] 의[조사] 합[명사]
  ~과~
    {}[명사] 의[조사] 곱[명사]
      ~과~
        0[한자어수사]
        1[한자어수사]
        2[한자어수사]
    {}[명사] 의[조사] 곱[명사]
      ~과~
        3[한자어수사]
        4[한자어수사]
        5[한자어수사]`
    );
  });

  it("생략 중첩 금지", function () {
    assert.throws(
      () =>
        assertForest(
          "3[한자어수사] 를[조사] 제곱하다[동사] -(아/어)[어미] 2[한자어수사] 를[조사] 더하다[동사] -(으)ㄴ[어미] 것[명사] 를[조사] 곱하다[동사] -다[어미] .",
          ""
        ),
      ChaltteokSyntaxError
    );
  });
});
